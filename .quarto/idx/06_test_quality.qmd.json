{"title":"6: Test data quality","markdown":{"yaml":{"title":"6: Test data quality"},"containsRefs":false,"markdown":"\nIn this data testing report, we conducted a comprehensive evaluation of the datasets retrieved for our project, focusing on author and headline classification. Our testing approach encompassed stringent methodologies aimed at ensuring the quality and reliability of the dataset for subsequent analysis and modeling.\n\n1.Data Presence Check: We verified that the dataset loaded from the CSV file contains data, ensuring that the file is not empty.\n\n2.Column Existence Validation: The presence of all expected columns is confirmed in the dataframe by comparing the list of column names with the expected list.\n\n3.Missing Values Inspection: The test for missing values is checked in crucial columns such as 'DATE', 'AUTHOR', 'sentiment', 'emotion', 'sentiment_score', and 'emotion_score', ensuring that these columns are populated with data.\n\n4.Date Format Validation: The format of the 'DATE' column is checked to ensure it is in the correct date format. This involved attempting to convert the 'DATE' column to datetime format using a specified format string and identifying any conversion failures.\n\n5.Data Type Verification: We verified that specific columns, such as 'sentiment_score' and 'emotion_score', have the correct data type (float), ensuring data consistency and integrity.\n\n6.Score Range Validation: The sentiment and emotion scores fall within the expected range of 0 to 1, ensuring the validity of these scores for subsequent analysis.\nThese checks collectively ensure the quality, completeness, and consistency of the dataset, providing confidence in its suitability for further analysis and decision-making processes.\n\nThe code can be seen below.\n\n```python\nimport unittest\nimport pandas as pd\n\nclass TestMainCsvData(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # Load the data once before all tests\n        cls.df = pd.read_csv(\"main.csv\")\n\n    def test_file_not_empty(self):\n        # Check that the dataframe is not empty\n        self.assertFalse(self.df.empty, \"The CSV file is empty.\")\n\n    def test_columns_existence(self):\n        # Verify all expected columns are in the dataframe\n        expected_columns = [\n            'Unnamed: 0','DATE', 'AUTHOR', 'TITLE', 'cleaned', 'sentiment',\n            'sentiment_score', 'emotion', 'emotion_score', 'ARTICLE'\n        ]\n        self.assertListEqual(list(self.df.columns), expected_columns, \"Not all expected columns are present.\")\n\n    def test_no_missing_values(self):\n        # Check for missing values in crucial columns\n        crucial_columns = ['DATE', 'AUTHOR', 'sentiment', 'emotion', 'sentiment_score', 'emotion_score']\n        for column in crucial_columns:\n            self.assertFalse(self.df[column].isnull().any(), f\"Missing values found in {column}.\")\n\n    def test_date_format(self):\n        # Check if 'DATE' column is in the correct format\n        try:\n            pd.to_datetime(self.df['DATE'], format='%Y-%m-%d')  # Adjust format as per your date format in CSV\n            date_format_issue = False\n        except ValueError:\n            date_format_issue = True\n        self.assertFalse(date_format_issue, \"Date format is incorrect.\")\n\n    def test_data_types(self):\n        # Ensure that specific columns have the correct data type\n        self.assertTrue(pd.api.types.is_float_dtype(self.df['sentiment_score']), \"Sentiment Score column is not a float.\")\n        self.assertTrue(pd.api.types.is_float_dtype(self.df['emotion_score']), \"Emotion Score column is not a float.\")\n\n    def test_score_ranges(self):\n        # Check if sentiment and emotion scores fall within expected ranges\n        self.assertTrue(self.df['sentiment_score'].between(0, 1).all(), \"Sentiment scores are out of the expected range (0-1).\")\n        self.assertTrue(self.df['emotion_score'].between(0, 1).all(), \"Emotion scores are out of the expected range (0-1).\")\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n* * *\n","srcMarkdownNoYaml":"\nIn this data testing report, we conducted a comprehensive evaluation of the datasets retrieved for our project, focusing on author and headline classification. Our testing approach encompassed stringent methodologies aimed at ensuring the quality and reliability of the dataset for subsequent analysis and modeling.\n\n1.Data Presence Check: We verified that the dataset loaded from the CSV file contains data, ensuring that the file is not empty.\n\n2.Column Existence Validation: The presence of all expected columns is confirmed in the dataframe by comparing the list of column names with the expected list.\n\n3.Missing Values Inspection: The test for missing values is checked in crucial columns such as 'DATE', 'AUTHOR', 'sentiment', 'emotion', 'sentiment_score', and 'emotion_score', ensuring that these columns are populated with data.\n\n4.Date Format Validation: The format of the 'DATE' column is checked to ensure it is in the correct date format. This involved attempting to convert the 'DATE' column to datetime format using a specified format string and identifying any conversion failures.\n\n5.Data Type Verification: We verified that specific columns, such as 'sentiment_score' and 'emotion_score', have the correct data type (float), ensuring data consistency and integrity.\n\n6.Score Range Validation: The sentiment and emotion scores fall within the expected range of 0 to 1, ensuring the validity of these scores for subsequent analysis.\nThese checks collectively ensure the quality, completeness, and consistency of the dataset, providing confidence in its suitability for further analysis and decision-making processes.\n\nThe code can be seen below.\n\n```python\nimport unittest\nimport pandas as pd\n\nclass TestMainCsvData(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # Load the data once before all tests\n        cls.df = pd.read_csv(\"main.csv\")\n\n    def test_file_not_empty(self):\n        # Check that the dataframe is not empty\n        self.assertFalse(self.df.empty, \"The CSV file is empty.\")\n\n    def test_columns_existence(self):\n        # Verify all expected columns are in the dataframe\n        expected_columns = [\n            'Unnamed: 0','DATE', 'AUTHOR', 'TITLE', 'cleaned', 'sentiment',\n            'sentiment_score', 'emotion', 'emotion_score', 'ARTICLE'\n        ]\n        self.assertListEqual(list(self.df.columns), expected_columns, \"Not all expected columns are present.\")\n\n    def test_no_missing_values(self):\n        # Check for missing values in crucial columns\n        crucial_columns = ['DATE', 'AUTHOR', 'sentiment', 'emotion', 'sentiment_score', 'emotion_score']\n        for column in crucial_columns:\n            self.assertFalse(self.df[column].isnull().any(), f\"Missing values found in {column}.\")\n\n    def test_date_format(self):\n        # Check if 'DATE' column is in the correct format\n        try:\n            pd.to_datetime(self.df['DATE'], format='%Y-%m-%d')  # Adjust format as per your date format in CSV\n            date_format_issue = False\n        except ValueError:\n            date_format_issue = True\n        self.assertFalse(date_format_issue, \"Date format is incorrect.\")\n\n    def test_data_types(self):\n        # Ensure that specific columns have the correct data type\n        self.assertTrue(pd.api.types.is_float_dtype(self.df['sentiment_score']), \"Sentiment Score column is not a float.\")\n        self.assertTrue(pd.api.types.is_float_dtype(self.df['emotion_score']), \"Emotion Score column is not a float.\")\n\n    def test_score_ranges(self):\n        # Check if sentiment and emotion scores fall within expected ranges\n        self.assertTrue(self.df['sentiment_score'].between(0, 1).all(), \"Sentiment scores are out of the expected range (0-1).\")\n        self.assertTrue(self.df['emotion_score'].between(0, 1).all(), \"Emotion scores are out of the expected range (0-1).\")\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n* * *\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"06_test_quality.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","theme":"cosmo","title":"6: Test data quality"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}