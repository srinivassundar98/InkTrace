{"title":"11: Visualizations","markdown":{"yaml":{"title":"11: Visualizations"},"headingText":"Checking for missing values and summarizing the data by authors","containsRefs":false,"markdown":"\nDistribution of Publications by Author:\nThis bar graph indicates a relatively even distribution of article publications among various authors, with some slight variations. Authors like Field Level Media and The Associated Press appear to be the most prolific, suggesting their dominant role in content creation within the dataset. This can imply a significant influence of these entities on the media landscape covered in the study.\n```{python}\nimport pandas as pd\ndata=pd.read_csv('main.csv')\nimport plotly.express as px\n\nmissing_values = data.isnull().sum()\nauthor_distribution = data['AUTHOR'].value_counts()\n\nauthor_distribution\nfig = px.bar(author_distribution, \n             x=author_distribution.index, \n             y=author_distribution.values, \n             labels={'x':'Author', 'y':'Count'},\n             title='Distribution of Publications by Author')\nfig.show()\n```\nAnalyzing Temporal Trends in Article Publications:\nThe line graph shows the number of articles published over time, highlighting noticeable spikes and troughs. These peaks may correspond to major news events or seasonal coverage spikes, suggesting a reactive nature of publications to current events. The data visualization effectively captures the dynamic nature of news cycles, offering insights into how external events drive media output\n## Analyzing Temporal Trends in Article Publications\n\nThis code converts the 'DATE' column to datetime format and groups the data by date to count the number of articles. It then plots these counts over time using a line graph to reveal trends.\n\n```{python}\nimport plotly.express as px\n# Convert the 'DATE' column to datetime format\ndata['DATE'] = pd.to_datetime(data['DATE'])\n\n# Group by Date and count the number of articles\ndate_counts = data.groupby('DATE').size().reset_index(name='counts')\n\n# Plotting using Plotly\nfig = px.line(date_counts, x='DATE', y='counts', title='Temporal Trends of Articles', labels={'counts': 'Number of Articles'})\nfig.update_layout(xaxis_title='Date', yaxis_title='Number of Articles')\nfig.show()\n\n```\n\n## Monthly Publication Trends by Author\n\nThis code segments the dataset by month and author, creating a stacked bar chart to visualize the number of articles published by each author over time. It effectively illustrates trends and contributions by individual authors.\n\n```{python}\n\n# Group by both Date and Author\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Load the dataset and prepare it\ndata = pd.read_csv('main.csv')\ndata['DATE'] = pd.to_datetime(data['DATE'])\n\n# Resample data to monthly frequency\ndata['MONTH'] = data['DATE'].dt.to_period('M')\n\n# Group by both Month and Author\nauthor_month_counts = data.groupby(['MONTH', 'AUTHOR']).size().unstack(fill_value=0)\n\n# Create the figure using Plotly\nfig = go.Figure()\nfor author in author_month_counts.columns:\n    fig.add_trace(go.Bar(x=author_month_counts.index.astype(str), y=author_month_counts[author], name=author))\n\nfig.update_layout(\n    barmode='stack',\n    title='Number of Articles by Author (Monthly)',\n    xaxis_title='Month',\n    yaxis_title='Number of Articles',\n    xaxis={'type': 'category'},  # Change this to 'category' to handle the period index as categorical\n    legend_title='Author',\n    legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n)\nfig.show()\n\n```\n\nN-grams Analysis (Unigrams, Bigrams, Trigrams, Quadgrams)\nUnigrams: Most frequently occurring words like \"trump,\" \"new,\" and \"people\" suggest a focus on political figures and general news content. This might indicate prevalent themes in the data or common topics of interest.\n\nBigrams and Trigrams: Sequences such as \"Donald Trump,\" \"White House,\" and \"episode people Wednesday\" show common phrases that likely relate to specific events or recurring topics, useful for understanding contextual trends.\n\nQuadgrams: More complex phrases like \"president Donald Trump said\" and \"secretary state Rex Tillerson\" point towards specific news narratives, helping identify detailed storylines or recurring news frameworks.\n\n\n```{python}\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport plotly.express as px\nimport string\n\n# Load the dataset\ndata = pd.read_csv('main.csv')\n\n# Function to clean and prepare text\ndef clean_text(text):\n    # Convert to lower case and remove punctuation\n    text = text.lower()\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    return text\n\n# Apply text cleaning\ndata['cleaned'] = data['cleaned'].apply(clean_text)\n\n# Function to create n-gram frequency plot\ndef plot_ngrams(n, max_features=26):\n    # Create CountVectorizer object for n-grams\n    vectorizer = CountVectorizer(ngram_range=(n, n), stop_words='english', max_features=max_features)\n    \n    # Fit and transform the data\n    ngrams = vectorizer.fit_transform(data['cleaned'])\n    \n    # Sum up their counts and get feature names\n    sum_ngrams = ngrams.sum(axis=0) \n    ngrams_freq = [(word, sum_ngrams[0, idx]) for word, idx in vectorizer.vocabulary_.items()]\n    \n    # Sort n-grams by frequency\n    ngrams_freq = sorted(ngrams_freq, key=lambda x: x[1], reverse=True)\n    words, freqs = zip(*ngrams_freq)\n    \n    # Create a DataFrame\n    df_ngrams = pd.DataFrame({'N-gram': words[1:], 'Frequency': freqs[1:]})\n    \n    # Plot using Plotly\n    if n==1:\n        grams='Uni'\n    elif n==2:\n        grams='Bi'\n    elif n==3:\n        grams='Tri'\n    elif n==4:\n        grams='Quad'\n    fig = px.bar(df_ngrams, x='N-gram', y='Frequency', title=f'Top {25} {grams}-grams', \n                 template='plotly_dark', color='Frequency', color_continuous_scale=px.colors.sequential.Viridis)\n    fig.show()\n\n# Plot unigrams, bigrams, and trigrams\n```\n\n\n## Unigrams\n\n```{python}\nplot_ngrams(1)\n\n\n```\n## Bigrams\n```{python}\nplot_ngrams(2)\n\n\n```\n## Trigrams\n```{python}\nplot_ngrams(3)\n\n```\n## Quadgrams\n```{python}\nplot_ngrams(4)\n```","srcMarkdownNoYaml":"\nDistribution of Publications by Author:\nThis bar graph indicates a relatively even distribution of article publications among various authors, with some slight variations. Authors like Field Level Media and The Associated Press appear to be the most prolific, suggesting their dominant role in content creation within the dataset. This can imply a significant influence of these entities on the media landscape covered in the study.\n```{python}\nimport pandas as pd\ndata=pd.read_csv('main.csv')\n# Checking for missing values and summarizing the data by authors\nimport plotly.express as px\n\nmissing_values = data.isnull().sum()\nauthor_distribution = data['AUTHOR'].value_counts()\n\nauthor_distribution\nfig = px.bar(author_distribution, \n             x=author_distribution.index, \n             y=author_distribution.values, \n             labels={'x':'Author', 'y':'Count'},\n             title='Distribution of Publications by Author')\nfig.show()\n```\nAnalyzing Temporal Trends in Article Publications:\nThe line graph shows the number of articles published over time, highlighting noticeable spikes and troughs. These peaks may correspond to major news events or seasonal coverage spikes, suggesting a reactive nature of publications to current events. The data visualization effectively captures the dynamic nature of news cycles, offering insights into how external events drive media output\n## Analyzing Temporal Trends in Article Publications\n\nThis code converts the 'DATE' column to datetime format and groups the data by date to count the number of articles. It then plots these counts over time using a line graph to reveal trends.\n\n```{python}\nimport plotly.express as px\n# Convert the 'DATE' column to datetime format\ndata['DATE'] = pd.to_datetime(data['DATE'])\n\n# Group by Date and count the number of articles\ndate_counts = data.groupby('DATE').size().reset_index(name='counts')\n\n# Plotting using Plotly\nfig = px.line(date_counts, x='DATE', y='counts', title='Temporal Trends of Articles', labels={'counts': 'Number of Articles'})\nfig.update_layout(xaxis_title='Date', yaxis_title='Number of Articles')\nfig.show()\n\n```\n\n## Monthly Publication Trends by Author\n\nThis code segments the dataset by month and author, creating a stacked bar chart to visualize the number of articles published by each author over time. It effectively illustrates trends and contributions by individual authors.\n\n```{python}\n\n# Group by both Date and Author\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Load the dataset and prepare it\ndata = pd.read_csv('main.csv')\ndata['DATE'] = pd.to_datetime(data['DATE'])\n\n# Resample data to monthly frequency\ndata['MONTH'] = data['DATE'].dt.to_period('M')\n\n# Group by both Month and Author\nauthor_month_counts = data.groupby(['MONTH', 'AUTHOR']).size().unstack(fill_value=0)\n\n# Create the figure using Plotly\nfig = go.Figure()\nfor author in author_month_counts.columns:\n    fig.add_trace(go.Bar(x=author_month_counts.index.astype(str), y=author_month_counts[author], name=author))\n\nfig.update_layout(\n    barmode='stack',\n    title='Number of Articles by Author (Monthly)',\n    xaxis_title='Month',\n    yaxis_title='Number of Articles',\n    xaxis={'type': 'category'},  # Change this to 'category' to handle the period index as categorical\n    legend_title='Author',\n    legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n)\nfig.show()\n\n```\n\nN-grams Analysis (Unigrams, Bigrams, Trigrams, Quadgrams)\nUnigrams: Most frequently occurring words like \"trump,\" \"new,\" and \"people\" suggest a focus on political figures and general news content. This might indicate prevalent themes in the data or common topics of interest.\n\nBigrams and Trigrams: Sequences such as \"Donald Trump,\" \"White House,\" and \"episode people Wednesday\" show common phrases that likely relate to specific events or recurring topics, useful for understanding contextual trends.\n\nQuadgrams: More complex phrases like \"president Donald Trump said\" and \"secretary state Rex Tillerson\" point towards specific news narratives, helping identify detailed storylines or recurring news frameworks.\n\n\n```{python}\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport plotly.express as px\nimport string\n\n# Load the dataset\ndata = pd.read_csv('main.csv')\n\n# Function to clean and prepare text\ndef clean_text(text):\n    # Convert to lower case and remove punctuation\n    text = text.lower()\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    return text\n\n# Apply text cleaning\ndata['cleaned'] = data['cleaned'].apply(clean_text)\n\n# Function to create n-gram frequency plot\ndef plot_ngrams(n, max_features=26):\n    # Create CountVectorizer object for n-grams\n    vectorizer = CountVectorizer(ngram_range=(n, n), stop_words='english', max_features=max_features)\n    \n    # Fit and transform the data\n    ngrams = vectorizer.fit_transform(data['cleaned'])\n    \n    # Sum up their counts and get feature names\n    sum_ngrams = ngrams.sum(axis=0) \n    ngrams_freq = [(word, sum_ngrams[0, idx]) for word, idx in vectorizer.vocabulary_.items()]\n    \n    # Sort n-grams by frequency\n    ngrams_freq = sorted(ngrams_freq, key=lambda x: x[1], reverse=True)\n    words, freqs = zip(*ngrams_freq)\n    \n    # Create a DataFrame\n    df_ngrams = pd.DataFrame({'N-gram': words[1:], 'Frequency': freqs[1:]})\n    \n    # Plot using Plotly\n    if n==1:\n        grams='Uni'\n    elif n==2:\n        grams='Bi'\n    elif n==3:\n        grams='Tri'\n    elif n==4:\n        grams='Quad'\n    fig = px.bar(df_ngrams, x='N-gram', y='Frequency', title=f'Top {25} {grams}-grams', \n                 template='plotly_dark', color='Frequency', color_continuous_scale=px.colors.sequential.Viridis)\n    fig.show()\n\n# Plot unigrams, bigrams, and trigrams\n```\n\n\n## Unigrams\n\n```{python}\nplot_ngrams(1)\n\n\n```\n## Bigrams\n```{python}\nplot_ngrams(2)\n\n\n```\n## Trigrams\n```{python}\nplot_ngrams(3)\n\n```\n## Quadgrams\n```{python}\nplot_ngrams(4)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"11_visualizations.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","theme":"cosmo","title":"11: Visualizations"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}