{"title":"16: Tests","markdown":{"yaml":{"title":"16: Tests"},"containsRefs":false,"markdown":"\n\nThis Python script defines a test suite for verifying data integrity across different storage formats using the unittest framework. The script leverages multiple Python libraries to load, manipulate, and validate data stored in CSV, JSON, and SQLite database formats. Here's a detailed breakdown and discussion of the various components and functionalities of this script:\n\n\n```python\nimport pandas as pd\nimport sqlite3\nimport unittest\nimport json\nimport zipfile\nimport numpy as np\n\nclass TestDataBackup(unittest.TestCase):\n    def setUp(self):\n        # Extract files from zip\n        with zipfile.ZipFile(\"data_backup.zip\", 'r') as zip_ref:\n            zip_ref.extractall(\"temp_data\")\n\n        # Load CSV into DataFrame\n        self.original_df = pd.read_csv(\"main.csv\")\n\n        # Load JSON into DataFrame\n        with open(\"temp_data/main.json\", \"r\") as file:\n            # Read lines individually and parse each one as JSON\n            json_data = [json.loads(line) for line in file]\n\n        self.json_df = pd.json_normalize(json_data)\n\n        # SQLite setup\n        self.conn = sqlite3.connect(\"temp_data/main.db\")\n\n        self.sqlite_df = pd.read_sql_query(\"SELECT * FROM data\", self.conn)\n        print(self.original_df.head())\n        print(self.json_df.head())\n\n\n    def test_full_data_integrity_json(self):\n        diffs = {}\n        for column in ['sentiment_score', 'emotion_score']:\n            if not np.allclose(self.original_df[column], self.json_df[column], atol=1e-8):\n                diffs[column] = self.original_df[column] - self.json_df[column]\n\n        if diffs:\n            for col, diff in diffs.items():\n                print(f\"Differences in {col}:\")\n                print(diff[diff != 0])  # Print only non-zero differences\n            self.fail(\"Significant differences were found between CSV and JSON DataFrames\")\n        else:\n            print(\"No significant differences found.\")\n\n    def test_full_data_integrity_sqlite(self):\n        \"\"\"Test each row from the CSV data for full data integrity in SQLite.\"\"\"\n    # Compare the two DataFrames\n        differences = self.original_df.compare(self.sqlite_df)\n        # Check if there are any differences\n        if not differences.empty:\n            print(\"Differences found between CSV and SQLite DataFrames:\")\n            print(differences)\n            self.fail(\"Data integrity test failed: Differences found between CSV and SQLite DataFrames\")\n        else:\n            print(\"No differences found: Data integrity test passed\")\n\n    def tearDown(self):\n        \"\"\"Close the database connections and clean up temporary files.\"\"\"\n        self.conn.close()\n        import shutil\n        shutil.rmtree('temp_data')  # Clean up the directory\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n```\n* * *\n","srcMarkdownNoYaml":"\n\nThis Python script defines a test suite for verifying data integrity across different storage formats using the unittest framework. The script leverages multiple Python libraries to load, manipulate, and validate data stored in CSV, JSON, and SQLite database formats. Here's a detailed breakdown and discussion of the various components and functionalities of this script:\n\n\n```python\nimport pandas as pd\nimport sqlite3\nimport unittest\nimport json\nimport zipfile\nimport numpy as np\n\nclass TestDataBackup(unittest.TestCase):\n    def setUp(self):\n        # Extract files from zip\n        with zipfile.ZipFile(\"data_backup.zip\", 'r') as zip_ref:\n            zip_ref.extractall(\"temp_data\")\n\n        # Load CSV into DataFrame\n        self.original_df = pd.read_csv(\"main.csv\")\n\n        # Load JSON into DataFrame\n        with open(\"temp_data/main.json\", \"r\") as file:\n            # Read lines individually and parse each one as JSON\n            json_data = [json.loads(line) for line in file]\n\n        self.json_df = pd.json_normalize(json_data)\n\n        # SQLite setup\n        self.conn = sqlite3.connect(\"temp_data/main.db\")\n\n        self.sqlite_df = pd.read_sql_query(\"SELECT * FROM data\", self.conn)\n        print(self.original_df.head())\n        print(self.json_df.head())\n\n\n    def test_full_data_integrity_json(self):\n        diffs = {}\n        for column in ['sentiment_score', 'emotion_score']:\n            if not np.allclose(self.original_df[column], self.json_df[column], atol=1e-8):\n                diffs[column] = self.original_df[column] - self.json_df[column]\n\n        if diffs:\n            for col, diff in diffs.items():\n                print(f\"Differences in {col}:\")\n                print(diff[diff != 0])  # Print only non-zero differences\n            self.fail(\"Significant differences were found between CSV and JSON DataFrames\")\n        else:\n            print(\"No significant differences found.\")\n\n    def test_full_data_integrity_sqlite(self):\n        \"\"\"Test each row from the CSV data for full data integrity in SQLite.\"\"\"\n    # Compare the two DataFrames\n        differences = self.original_df.compare(self.sqlite_df)\n        # Check if there are any differences\n        if not differences.empty:\n            print(\"Differences found between CSV and SQLite DataFrames:\")\n            print(differences)\n            self.fail(\"Data integrity test failed: Differences found between CSV and SQLite DataFrames\")\n        else:\n            print(\"No differences found: Data integrity test passed\")\n\n    def tearDown(self):\n        \"\"\"Close the database connections and clean up temporary files.\"\"\"\n        self.conn.close()\n        import shutil\n        shutil.rmtree('temp_data')  # Clean up the directory\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n```\n* * *\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"16_tests.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","theme":"cosmo","title":"16: Tests"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}